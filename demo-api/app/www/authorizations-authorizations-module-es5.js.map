{"version":3,"sources":["webpack:///src/app/authorizations/authorizations.component.html","webpack:///src/app/authorizations/login/login.component.html","webpack:///src/app/authorizations/register/register.component.html","webpack:///src/app/authorizations/authorizations-routing.module.ts","webpack:///src/app/authorizations/authorizations.component.scss","webpack:///src/app/authorizations/authorizations.component.ts","webpack:///src/app/authorizations/authorizations.module.ts","webpack:///src/app/authorizations/login/login-form.service.ts","webpack:///src/app/authorizations/login/login.component.scss","webpack:///src/app/authorizations/login/login.component.ts","webpack:///src/app/authorizations/register/register-form.service.ts","webpack:///src/app/authorizations/register/register.component.scss","webpack:///src/app/authorizations/register/register.component.ts","webpack:///src/app/authorizations/shared/interceptors/authorizations-http.interceptor.ts","webpack:///src/app/authorizations/shared/services/authorizations-http.service.ts","webpack:///src/app/authorizations/shared/services/loading.service.ts","webpack:///src/app/authorizations/shared/validators/confirm-validator.directive.ts"],"names":["routes","path","component","children","redirectTo","AuthorizationsRoutingModule","imports","forChild","exports","AuthorizationsComponent","selector","template","AuthorizationsModule","declarations","providers","provide","useClass","multi","LoginFormService","builder","group","email","password","required","providedIn","LoginComponent","loadingService","loginFormService","authorizationHttpService","router","form","get","subscription","closed","unsubscribe","reset","error","login","value","subscribe","navigate","RegisterFormService","confirmValidator","confirm","RegisterComponent","registerFormService","authorizationsHttpService","register","post","AuthorizationsHttpInterceptor","loading","req","next","action","url","api","authozizations","handle","pipe","message","status","AuthorizationsHttpService","http","user","data","set","LoadingService","ConfirmValidator","control","dirty","root","valueChanges","updateValueAndValidity","useExisting"],"mappings":"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","file":"authorizations-authorizations-module-es5.js","sourcesContent":["export default \"<ion-tabs>\\n    <ion-tab-bar slot=\\\"bottom\\\">\\n        <ion-tab-button tab=\\\"login\\\">\\n            <ion-label>Login</ion-label>\\n        </ion-tab-button>\\n        <ion-tab-button tab=\\\"register\\\">\\n            <ion-label>Register</ion-label>\\n        </ion-tab-button>\\n    </ion-tab-bar>\\n</ion-tabs>\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Login</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content class=\\\"ion-padding\\\">\\n  <h1>\\n    <span *ngIf=\\\"!error else title\\\">Login to the app</span>\\n    <ng-template #title>\\n      <ion-text class=\\\"ion-padding\\\" color=\\\"danger\\\">{{ error }}</ion-text>\\n    </ng-template>\\n  </h1>\\n  <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"login()\\\">\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Email</ion-label>\\n      <ion-input type=\\\"email\\\" formControlName=\\\"email\\\"></ion-input>\\n    </ion-item>\\n    <br />\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Password</ion-label>\\n      <ion-input type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\n    </ion-item>\\n    <br />\\n    <ion-button *ngIf=\\\"!loadingService.login else loading\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Submit</ion-button>\\n    <ng-template #loading>\\n      <ion-spinner name=\\\"crescent\\\"></ion-spinner>\\n    </ng-template>\\n  </form>\\n</ion-content>\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-title>Register</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content class=\\\"ion-padding\\\">\\n    <h1>\\n        <span *ngIf=\\\"!error else title\\\">Login to the app</span>\\n        <ng-template #title>\\n            <ion-text class=\\\"ion-padding\\\" color=\\\"danger\\\">{{ error }}</ion-text>\\n        </ng-template>\\n    </h1>\\n    <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"register()\\\">\\n        <ion-item>\\n            <ion-label position=\\\"floating\\\">Email</ion-label>\\n            <ion-input type=\\\"email\\\" formControlName=\\\"email\\\"></ion-input>\\n        </ion-item>\\n        <ion-text class=\\\"ion-padding\\\" color=\\\"danger\\\" *ngIf=\\\"form.get('email').dirty\\\">\\n            <span *ngIf=\\\"form.get('email').hasError('required')\\\">\\n                Email is required\\n            </span>\\n            <span *ngIf=\\\"form.get('email').hasError('email')\\\">\\n                Email must be valid\\n            </span>\\n        </ion-text>\\n        <br />\\n        <ion-item>\\n            <ion-label position=\\\"floating\\\">Password</ion-label>\\n            <ion-input type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\n        </ion-item>\\n        <ion-text class=\\\"ion-padding\\\" color=\\\"danger\\\"\\n            *ngIf=\\\"form.get('password').dirty && form.get('password').hasError('required')\\\">\\n            Password is required\\n        </ion-text>\\n        <br />\\n        <ion-item>\\n            <ion-label position=\\\"floating\\\">Confirm</ion-label>\\n            <ion-input type=\\\"password\\\" formControlName=\\\"confirm\\\"></ion-input>\\n        </ion-item>\\n        <ion-text class=\\\"ion-padding\\\" color=\\\"danger\\\"\\n            *ngIf=\\\"form.get('confirm').dirty &&  form.get('confirm').hasError('confirm')\\\">\\n            Confirm must match\\n        </ion-text>\\n        <br />\\n        <br />\\n        <ion-button *ngIf=\\\"!loadingService.register else loading\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Submit\\n        </ion-button>\\n        <ng-template #loading>\\n            <ion-spinner name=\\\"crescent\\\"></ion-spinner>\\n        </ng-template>\\n    </form>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthorizationsComponent } from \"./authorizations.component\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { RegisterComponent } from \"./register/register.component\";\n\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AuthorizationsComponent,\n        children: [\n            {\n                path: 'login',\n                component: LoginComponent\n            },\n            {\n                path: 'register',\n                component: RegisterComponent\n            },\n            {\n                path: '**',\n                redirectTo: 'login'\n            }\n        ],\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AuthorizationsRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhvcml6YXRpb25zL2F1dGhvcml6YXRpb25zLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './authorizations.component.html',\n  styleUrls: ['./authorizations.component.scss'],\n})\nexport class AuthorizationsComponent { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthorizationsComponent } from \"./authorizations.component\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { RegisterComponent } from \"./register/register.component\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { AuthorizationsHttpInterceptor } from \"./shared/interceptors/authorizations-http.interceptor\";\nimport { AuthorizationsRoutingModule } from './authorizations-routing.module';\n\n\n@NgModule({\n    declarations: [\n        AuthorizationsComponent,\n        LoginComponent,\n        RegisterComponent\n    ],\n    imports: [\n        CommonModule,\n        SharedModule,\n        AuthorizationsRoutingModule\n    ],\n    providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: AuthorizationsHttpInterceptor, multi: true },\n    ]\n})\nexport class AuthorizationsModule { }\n","import { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LoginFormService {\n\n    constructor(private builder: FormBuilder) { }\n\n    get(): FormGroup {\n        return this.builder.group({\n            email: ['', Validators.email],\n            password: ['', Validators.required]\n        });\n    }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhvcml6YXRpb25zL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from \"@angular/forms\";\nimport { Router } from '@angular/router';\n\nimport { Subscription } from \"rxjs\";\n\nimport { LoginFormService } from \"./login-form.service\";\nimport { AuthorizationsHttpService } from '../shared/services/authorizations-http.service';\nimport { LoadingService } from '../shared/services/loading.service';\n\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n\n    public form: FormGroup;\n\n    public error: string;\n\n    private subscription: Subscription;\n\n    constructor(\n        public loadingService: LoadingService,\n        private loginFormService: LoginFormService,\n        private authorizationHttpService: AuthorizationsHttpService,\n        private router: Router) { }\n\n    ngOnInit(): void {\n        this.form = this.loginFormService.get();\n    }\n\n    ionViewDidLeave(): void {\n        if (this.subscription && !this.subscription.closed) {\n            this.subscription.unsubscribe();\n        }\n        this.form.reset();\n        this.error = null;\n        this.loadingService.login = false;\n    }\n\n    login(): Subscription {\n        return this.subscription = this.authorizationHttpService\n            .get(\n                this.form.get('email').value,\n                this.form.get('password').value,\n            )\n            .subscribe(\n                () => this.router.navigate(['/users']),\n                (error: string) => this.error = error\n            );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { ConfirmValidator } from '../shared/validators/confirm-validator.directive';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RegisterFormService {\n\n    constructor(\n        private builder: FormBuilder,\n        private confirmValidator: ConfirmValidator) {\n    }\n\n    get(): FormGroup {\n        return this.builder.group({\n            email: ['', [Validators.required, Validators.email]],\n            password: ['', Validators.required],\n            confirm: ['', [Validators.required, this.confirmValidator]],\n        });\n    }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhvcml6YXRpb25zL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from \"@angular/forms\";\nimport { Router } from '@angular/router';\n\nimport { Subscription } from \"rxjs\";\n\nimport { AuthorizationsHttpService } from '../shared/services/authorizations-http.service';\nimport { RegisterFormService } from \"./register-form.service\";\nimport { LoadingService } from '../shared/services/loading.service';\n\n\n@Component({\n    selector: 'app-user',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n\n    public form: FormGroup;\n\n    public error: string;\n\n    private subscription: Subscription;\n\n    constructor(\n        public loadingService: LoadingService,\n        private registerFormService: RegisterFormService,\n        private authorizationsHttpService: AuthorizationsHttpService,\n        private router: Router) {\n    }\n\n    ngOnInit(): void {\n        this.form = this.registerFormService.get();\n    }\n\n    ionViewDidLeave(): void {\n        if (this.subscription && !this.subscription.closed) {\n            this.subscription.unsubscribe();\n        }\n        this.form.reset();\n        this.error = null;\n        this.loadingService.register = false;\n    }\n\n    register(): Subscription {\n        return this.subscription = this.authorizationsHttpService\n            .post(\n                this.form.get('email').value,\n                this.form.get('password').value\n            )\n            .subscribe(\n                () => this.router.navigate(['/authorizations', 'login']),\n                (error: string) => this.error = error\n            );\n    }\n\n}\n","import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment';\nimport { LoadingService } from '../services/loading.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationsHttpInterceptor implements HttpInterceptor {\n\n  constructor(private loading: LoadingService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let action = null;\n    if (req.url === environment.api.authozizations.login) {\n      action = 'login';\n    } else if (req.url === environment.api.authozizations.register) {\n      action = 'register';\n    } else {\n      return next.handle(req);\n    }\n    this.loading[action] = true;\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse) => {\n        let message = 'Invalid Form';\n        if (!error.status) {\n          message = 'Network Error';\n        } else if (404 === error.status) {\n          message = 'Invalid Credentials';\n        } else if (409 === error.status) {\n          message = error.error['error'];\n        } else if (500 === error.status) {\n          message = 'Server Error';\n        }\n        throw message;\n      }),\n      finalize(() => {\n        this.loading[action] = false;\n      })\n    );\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { User } from 'src/app/core/models/user.model';\nimport { UserService } from 'src/app/core/services/user.service';\nimport { environment } from 'src/environments/environment';\n\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AuthorizationsHttpService {\n\n  constructor(\n    private http: HttpClient,\n    private user: UserService) { }\n\n  post(email: string, password: string): Observable<User> {\n    return this.http\n      .post<User>(environment.api.authozizations.register, {\n        email: email,\n        password: password\n      });\n  }\n\n  get(email: string, password: string): Observable<User> {\n    return this.http\n      .post<User>(environment.api.authozizations.login, {\n        email: email,\n        password: password\n      }).pipe(tap((data: User) => this.user.set(data)));\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService {\n\n  public login: boolean;\n\n  public register: boolean;\n\n  constructor() { }\n  \n}\n","import { Directive, Injectable } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n@Directive({\n  selector: '[appConfirm]',\n  providers: [{ provide: NG_VALIDATORS, useExisting: ConfirmValidator, multi: true }]\n})\nexport class ConfirmValidator implements Validator {\n\n  private subscription: Subscription;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    if (!control.dirty) {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n        this.subscription = null;\n      }\n      return null;\n    }\n    if (!this.subscription) {\n      this.subscription = control.root.get('password')\n        .valueChanges.subscribe(() => control.updateValueAndValidity())\n    }\n    return control.root.get('password').value !== control.value ? { 'confirm': true } : null;\n  }\n\n}\n"]}