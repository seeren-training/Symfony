{"version":3,"sources":["./src/app/authorizations/authorizations.component.html","./src/app/authorizations/login/login.component.html","./src/app/authorizations/register/register.component.html","./src/app/authorizations/authorizations-routing.module.ts","./src/app/authorizations/authorizations.component.scss","./src/app/authorizations/authorizations.component.ts","./src/app/authorizations/authorizations.module.ts","./src/app/authorizations/login/login-form.service.ts","./src/app/authorizations/login/login.component.scss","./src/app/authorizations/login/login.component.ts","./src/app/authorizations/register/register-form.service.ts","./src/app/authorizations/register/register.component.scss","./src/app/authorizations/register/register.component.ts","./src/app/authorizations/shared/interceptors/authorizations-http.interceptor.ts","./src/app/authorizations/shared/services/authorizations-http.service.ts","./src/app/authorizations/shared/services/loading.service.ts","./src/app/authorizations/shared/validators/confirm-validator.directive.ts"],"names":[],"mappings":"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","file":"authorizations-authorizations-module-es2015.js","sourcesContent":["export default \"<ion-tabs>\\n    <ion-tab-bar slot=\\\"bottom\\\">\\n        <ion-tab-button tab=\\\"login\\\">\\n            <ion-label>Login</ion-label>\\n        </ion-tab-button>\\n        <ion-tab-button tab=\\\"register\\\">\\n            <ion-label>Register</ion-label>\\n        </ion-tab-button>\\n    </ion-tab-bar>\\n</ion-tabs>\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Login</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content class=\\\"ion-padding\\\">\\n  <h1>\\n    <span *ngIf=\\\"!error else title\\\">Login to the app</span>\\n    <ng-template #title>\\n      <ion-text class=\\\"ion-padding\\\" color=\\\"danger\\\">{{ error }}</ion-text>\\n    </ng-template>\\n  </h1>\\n  <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"login()\\\">\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Email</ion-label>\\n      <ion-input type=\\\"email\\\" formControlName=\\\"email\\\"></ion-input>\\n    </ion-item>\\n    <br />\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Password</ion-label>\\n      <ion-input type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\n    </ion-item>\\n    <br />\\n    <ion-button *ngIf=\\\"!loadingService.login else loading\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Submit</ion-button>\\n    <ng-template #loading>\\n      <ion-spinner name=\\\"crescent\\\"></ion-spinner>\\n    </ng-template>\\n  </form>\\n</ion-content>\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-title>Register</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content class=\\\"ion-padding\\\">\\n    <h1>\\n        <span *ngIf=\\\"!error else title\\\">Login to the app</span>\\n        <ng-template #title>\\n            <ion-text class=\\\"ion-padding\\\" color=\\\"danger\\\">{{ error }}</ion-text>\\n        </ng-template>\\n    </h1>\\n    <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"register()\\\">\\n        <ion-item>\\n            <ion-label position=\\\"floating\\\">Email</ion-label>\\n            <ion-input type=\\\"email\\\" formControlName=\\\"email\\\"></ion-input>\\n        </ion-item>\\n        <ion-text class=\\\"ion-padding\\\" color=\\\"danger\\\" *ngIf=\\\"form.get('email').dirty\\\">\\n            <span *ngIf=\\\"form.get('email').hasError('required')\\\">\\n                Email is required\\n            </span>\\n            <span *ngIf=\\\"form.get('email').hasError('email')\\\">\\n                Email must be valid\\n            </span>\\n        </ion-text>\\n        <br />\\n        <ion-item>\\n            <ion-label position=\\\"floating\\\">Password</ion-label>\\n            <ion-input type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\n        </ion-item>\\n        <ion-text class=\\\"ion-padding\\\" color=\\\"danger\\\"\\n            *ngIf=\\\"form.get('password').dirty && form.get('password').hasError('required')\\\">\\n            Password is required\\n        </ion-text>\\n        <br />\\n        <ion-item>\\n            <ion-label position=\\\"floating\\\">Confirm</ion-label>\\n            <ion-input type=\\\"password\\\" formControlName=\\\"confirm\\\"></ion-input>\\n        </ion-item>\\n        <ion-text class=\\\"ion-padding\\\" color=\\\"danger\\\"\\n            *ngIf=\\\"form.get('confirm').dirty &&  form.get('confirm').hasError('confirm')\\\">\\n            Confirm must match\\n        </ion-text>\\n        <br />\\n        <br />\\n        <ion-button *ngIf=\\\"!loadingService.register else loading\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Submit\\n        </ion-button>\\n        <ng-template #loading>\\n            <ion-spinner name=\\\"crescent\\\"></ion-spinner>\\n        </ng-template>\\n    </form>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthorizationsComponent } from \"./authorizations.component\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { RegisterComponent } from \"./register/register.component\";\n\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AuthorizationsComponent,\n        children: [\n            {\n                path: 'login',\n                component: LoginComponent\n            },\n            {\n                path: 'register',\n                component: RegisterComponent\n            },\n            {\n                path: '**',\n                redirectTo: 'login'\n            }\n        ],\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AuthorizationsRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhvcml6YXRpb25zL2F1dGhvcml6YXRpb25zLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './authorizations.component.html',\n  styleUrls: ['./authorizations.component.scss'],\n})\nexport class AuthorizationsComponent { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthorizationsComponent } from \"./authorizations.component\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { RegisterComponent } from \"./register/register.component\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { AuthorizationsHttpInterceptor } from \"./shared/interceptors/authorizations-http.interceptor\";\nimport { AuthorizationsRoutingModule } from './authorizations-routing.module';\n\n\n@NgModule({\n    declarations: [\n        AuthorizationsComponent,\n        LoginComponent,\n        RegisterComponent\n    ],\n    imports: [\n        CommonModule,\n        SharedModule,\n        AuthorizationsRoutingModule\n    ],\n    providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: AuthorizationsHttpInterceptor, multi: true },\n    ]\n})\nexport class AuthorizationsModule { }\n","import { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LoginFormService {\n\n    constructor(private builder: FormBuilder) { }\n\n    get(): FormGroup {\n        return this.builder.group({\n            email: ['', Validators.email],\n            password: ['', Validators.required]\n        });\n    }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhvcml6YXRpb25zL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from \"@angular/forms\";\nimport { Router } from '@angular/router';\n\nimport { Subscription } from \"rxjs\";\n\nimport { LoginFormService } from \"./login-form.service\";\nimport { AuthorizationsHttpService } from '../shared/services/authorizations-http.service';\nimport { LoadingService } from '../shared/services/loading.service';\n\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n\n    public form: FormGroup;\n\n    public error: string;\n\n    private subscription: Subscription;\n\n    constructor(\n        public loadingService: LoadingService,\n        private loginFormService: LoginFormService,\n        private authorizationHttpService: AuthorizationsHttpService,\n        private router: Router) { }\n\n    ngOnInit(): void {\n        this.form = this.loginFormService.get();\n    }\n\n    ionViewDidLeave(): void {\n        if (this.subscription && !this.subscription.closed) {\n            this.subscription.unsubscribe();\n        }\n        this.form.reset();\n        this.error = null;\n        this.loadingService.login = false;\n    }\n\n    login(): Subscription {\n        return this.subscription = this.authorizationHttpService\n            .get(\n                this.form.get('email').value,\n                this.form.get('password').value,\n            )\n            .subscribe(\n                () => this.router.navigate(['/users']),\n                (error: string) => this.error = error\n            );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { ConfirmValidator } from '../shared/validators/confirm-validator.directive';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RegisterFormService {\n\n    constructor(\n        private builder: FormBuilder,\n        private confirmValidator: ConfirmValidator) {\n    }\n\n    get(): FormGroup {\n        return this.builder.group({\n            email: ['', [Validators.required, Validators.email]],\n            password: ['', Validators.required],\n            confirm: ['', [Validators.required, this.confirmValidator]],\n        });\n    }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhvcml6YXRpb25zL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from \"@angular/forms\";\nimport { Router } from '@angular/router';\n\nimport { Subscription } from \"rxjs\";\n\nimport { AuthorizationsHttpService } from '../shared/services/authorizations-http.service';\nimport { RegisterFormService } from \"./register-form.service\";\nimport { LoadingService } from '../shared/services/loading.service';\n\n\n@Component({\n    selector: 'app-user',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n\n    public form: FormGroup;\n\n    public error: string;\n\n    private subscription: Subscription;\n\n    constructor(\n        public loadingService: LoadingService,\n        private registerFormService: RegisterFormService,\n        private authorizationsHttpService: AuthorizationsHttpService,\n        private router: Router) {\n    }\n\n    ngOnInit(): void {\n        this.form = this.registerFormService.get();\n    }\n\n    ionViewDidLeave(): void {\n        if (this.subscription && !this.subscription.closed) {\n            this.subscription.unsubscribe();\n        }\n        this.form.reset();\n        this.error = null;\n        this.loadingService.register = false;\n    }\n\n    register(): Subscription {\n        return this.subscription = this.authorizationsHttpService\n            .post(\n                this.form.get('email').value,\n                this.form.get('password').value\n            )\n            .subscribe(\n                () => this.router.navigate(['/authorizations', 'login']),\n                (error: string) => this.error = error\n            );\n    }\n\n}\n","import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment';\nimport { LoadingService } from '../services/loading.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationsHttpInterceptor implements HttpInterceptor {\n\n  constructor(private loading: LoadingService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let action = null;\n    if (req.url === environment.api.authozizations.login) {\n      action = 'login';\n    } else if (req.url === environment.api.authozizations.register) {\n      action = 'register';\n    } else {\n      return next.handle(req);\n    }\n    this.loading[action] = true;\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse) => {\n        let message = 'Invalid Form';\n        if (!error.status) {\n          message = 'Network Error';\n        } else if (404 === error.status) {\n          message = 'Invalid Credentials';\n        } else if (409 === error.status) {\n          message = error.error['error'];\n        } else if (500 === error.status) {\n          message = 'Server Error';\n        }\n        throw message;\n      }),\n      finalize(() => {\n        this.loading[action] = false;\n      })\n    );\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { User } from 'src/app/core/models/user.model';\nimport { UserService } from 'src/app/core/services/user.service';\nimport { environment } from 'src/environments/environment';\n\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AuthorizationsHttpService {\n\n  constructor(\n    private http: HttpClient,\n    private user: UserService) { }\n\n  post(email: string, password: string): Observable<User> {\n    return this.http\n      .post<User>(environment.api.authozizations.register, {\n        email: email,\n        password: password\n      });\n  }\n\n  get(email: string, password: string): Observable<User> {\n    return this.http\n      .post<User>(environment.api.authozizations.login, {\n        email: email,\n        password: password\n      }).pipe(tap((data: User) => this.user.set(data)));\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService {\n\n  public login: boolean;\n\n  public register: boolean;\n\n  constructor() { }\n  \n}\n","import { Directive, Injectable } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n@Directive({\n  selector: '[appConfirm]',\n  providers: [{ provide: NG_VALIDATORS, useExisting: ConfirmValidator, multi: true }]\n})\nexport class ConfirmValidator implements Validator {\n\n  private subscription: Subscription;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    if (!control.dirty) {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n        this.subscription = null;\n      }\n      return null;\n    }\n    if (!this.subscription) {\n      this.subscription = control.root.get('password')\n        .valueChanges.subscribe(() => control.updateValueAndValidity())\n    }\n    return control.root.get('password').value !== control.value ? { 'confirm': true } : null;\n  }\n\n}\n"],"sourceRoot":"webpack:///"}